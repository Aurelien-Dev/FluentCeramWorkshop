@using CeramWorkshop.Client.DataIdentity
@using CeramWorkshop.Client.DataIdentity.Models
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inherits LayoutComponentBase

<FluentLayout>
    <FluentHeader>
        CeramWorkshop.Client
        <FluentSpacer />
        <AuthorizeView>
            <Authorized>
                <FluentPersona ImageSize="50px" Initials="@connectedWorkshop?.GetInitials()">
                </FluentPersona>
            </Authorized>
            <NotAuthorized>
                <FluentNavLink Href="Account/Register">Register</FluentNavLink>
                <FluentNavLink Href="Account/Login">Login</FluentNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer />
        <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
    </FluentFooter>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {

    [Inject] ApplicationIdentityDbContext? _applicationIdentityDbContext { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    Workshop? connectedWorkshop;


    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var aauthState = await authenticationState;
            var uuser = aauthState?.User;

            if (uuser?.Identity is not null && uuser.Identity.IsAuthenticated)
            {
                connectedWorkshop = await _applicationIdentityDbContext.Users.FirstOrDefaultAsync(u => u.Email == uuser.Identity.Name);
            }
        }
    }
}